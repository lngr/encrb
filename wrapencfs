#!/usr/bin/env python
# Copyright (c) 2012-2014 Heikki Hokkanen <hoxu at users.sf.net>
# Copyright (c) 2013 Andrius Sutas <git at motoko.sutas.eu>
# Copyright (c) 2014 Gustavo Brigo <me at gustavobrigo.com>
# Copyright (c) 2014 Alexander Langer <alex at big.endian.de>
# License: GPLv3
# wrapencfs - wraps encfs
#
# Allows to backup plaintext local directories to remote machine as encrypted, using
# encfs --reverse and arbitrary commands
import optparse
import os
import random
import string
import subprocess
import commands
import sys
import tempfile
import time
import getpass
import re

def path_to_string(path):
    return path.strip('/').replace('/', '-')

class Encrb:
    def check_environment(self):
        required_tools = [('encfs', 1, 7, 3), ('fusermount', 0, 0, 0)]
        
        for (required_cmd, required_major, required_minor, required_build) in required_tools:
            status, version = commands.getstatusoutput(required_cmd + " --version")

            # Check return value
            if (status != 0):
                raise Exception(required_cmd + " not found or crashed during version call...")
            
            # Consider only first "version" line
            version = version.split('\n')[0]

            # Look only for two or three numbers separated by dots
            version = str(re.search(r"\d\.\d(\.\d)?", version).group())

            # Parse version numbers
            version_numbers = version.split('.')
            version_major = int(version_numbers[0])
            version_minor = int(version_numbers[1])
            version_build = 0
            if (len(version_numbers) > 2):
                version_build = int(version_numbers[2])
            
            # Check version
            if ((version_major, version_minor, version_build) < (required_major, required_minor, required_build)):
                raise Exception(required_cmd + " must have version " + ".".join([str(required_major), str(required_minor), str(required_build)]) + " or higher, is: " + version)
                
            print required_cmd + " version: " + version

    def get_modified_env(self):
        env = dict(os.environ)
        env['ENCFS6_CONFIG'] = os.path.expanduser(self.options.keyfile)
        return env

    def substitute_args(self, encpath):
        return [ a.replace('{}', encpath) for a in self.args[1:] ]

    def run_wrapped(self):
        path = self.args[0]
        if (self.options.verbose):
            print 'Wrapping path:', path

        friendlyname = path_to_string(path)
        tmpdir = tempfile.mkdtemp('-' + friendlyname)

        # create encfs mount
        if (self.options.verbose):
            print 'Mounting encfs on "%s"...' % tmpdir
        try:
            env = self.get_modified_env()
            subprocess.call(['encfs', '--reverse', '--extpass', 'cat %s' % os.path.expanduser(self.options.passfile), path, tmpdir], env=env)
            cmd = self.substitute_args(tmpdir);
            if (self.options.verbose):
                print 'Running: ', cmd
            subprocess.call(cmd)

        finally:
            # wait a bit, or unmounting fails
            if (self.options.verbose):
                print 'Sleeping a bit...'
            time.sleep(5)

            # umount encfs
            subprocess.call(['fusermount', '-u', tmpdir])
            os.rmdir(tmpdir)

    def run(self):
        parser = optparse.OptionParser(usage='Usage: %prog [options] /path/to/encrypt <command>\nAny occurence of the string "{}" in the command will be replaced by the encrypted path.')
        parser.add_option('-k', '--keyfile', dest='keyfile', default='~/.wrapencfs/encfs.xml', help='encfs keyfile to use [%default]')
        parser.add_option('-p', '--passfile', dest='passfile', default='~/.wrapencfs/password', help='file containing encfs keyfile password [%default]')
        parser.add_option('', '--no-env-check', dest='check_env', default=True, action="store_false", help="Disable environment tool version checking")
        parser.add_option('-t', '--tmpdir', dest='custom_tmp', default='', help='Define a custom tmp dir, otherwise the system default will be used')
        parser.add_option('-v', '--verbose', dest='verbose', default=False, action="store_true", help='Verbose output')

        (options, args) = parser.parse_args()
        self.options = options
        self.args = args
        self.options.keyfile = os.path.expanduser(self.options.keyfile)
        self.options.passfile = os.path.expanduser(self.options.passfile)
        self.options.custom_tmp = os.path.expanduser(self.options.custom_tmp)
        if (self.options.verbose):
            print 'Options:', options

        if (self.options.check_env):
            self.check_environment()

        if len(self.args) < 2:
            parser.error('Need more than two arguments')

        if (self.options.custom_tmp):
            if (not os.path.exists(self.options.custom_tmp)):
                parser.error('Invalid temp dir')
            else:
                tempfile.tempdir = self.options.custom_tmp

        self.setup_once()
        self.run_wrapped()

    def setup_once(self):
        if (not os.path.exists(self.options.passfile)):
            print '!!!!! Passfile missing, running in setup mode. Press enter for default encfs settings.'

            # Ensure passfile leaf and parent dirs are present,
            # otherwise open() will fail
            fdir = os.path.dirname(self.options.keyfile)
            if not os.path.exists(fdir):
                os.makedirs(fdir)
        
            # Ask or generate and save password
            password = getpass.getpass(prompt='Encfs encryption password (enter for random): ')
            if (password == ''):
                print "No password given, generating random one..."
                password = ''.join(random.choice(string.letters + string.digits) for _ in range(20))
        
            f = open(self.options.passfile, 'w')
            f.write(password)
            f.close()

        if (not os.path.exists(self.options.keyfile)):
            print '!!!!! keyfile missing, running in setup mode. Press enter for default encfs settings.'

            # Mount in reverse mode on arbitrary directory,
            # as this seems to be the only way to generate config
            tmpdir = tempfile.mkdtemp('-encfs-first')
            tmpdirplain = tempfile.mkdtemp('-encfs-first-plain')
            try:
                print "Mounting encfs for first time..."
                env = self.get_modified_env()
                subprocess.call(['encfs', '--extpass', 'cat %s' % os.path.expanduser(self.options.passfile), '--reverse', tmpdir, tmpdirplain], env=env)
            finally:
                print 'Unmounting encfs "%s...' % tmpdirplain
                subprocess.call(['fusermount', '-u', tmpdirplain])

e = Encrb()
e.run()
